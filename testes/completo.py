# ================================
# C√âLULA 1: IMPORTS E CONFIGURA√á√ïES INICIAIS
# ================================

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import requests
from scipy import ndimage
from scipy.stats import rankdata
import warnings
warnings.filterwarnings('ignore')

print("‚úÖ Bibliotecas importadas com sucesso!")

# ================================
# C√âLULA 2: CONFIGURA√á√ïES PRINCIPAIS
# ================================

# Coordenadas espec√≠ficas: 22¬∞53'17"S, 47¬∞04'07"W
TARGET_LAT = -22.888056  # 22¬∞53'17"S convertido para decimal
TARGET_LON = -47.068611  # 47¬∞04'07"W convertido para decimal
TARGET_COORDS = (TARGET_LAT, TARGET_LON)

# SUBSTITUA PELAS SUAS CREDENCIAIS REAIS
GOOGLE_MAPS_API_KEY = "AIzaSyDnl_2euroZ9uv4d5yYhddvvSTQcmJnufA"
SENTINEL_CLIENT_ID = "sh-0dca0b34-16fc-4839-8aa2-868a9f956dd5"
SENTINEL_CLIENT_SECRET = "nv3TfJxIkp1WC20uxVcFVwjPm5DS4m3v"

# Configura√ß√µes de √°rea (mesmo bbox para ambas as fontes)
AREA_SIZE = 0.018  # Aproximadamente 2km em graus decimais
BBOX = [
    TARGET_LON - AREA_SIZE/2,  # min_lon
    TARGET_LAT - AREA_SIZE/2,  # min_lat  
    TARGET_LON + AREA_SIZE/2,  # max_lon
    TARGET_LAT + AREA_SIZE/2   # max_lat
]

# Configura√ß√µes de imagem
IMAGE_SIZE = "800x600"
ZOOM_LEVEL = 16
MAP_TYPE = "satellite"

# Datas para Sentinel
END_DATE = "2025-07-27"
START_DATE = "2025-07-01"

print(f"üéØ Coordenadas configuradas: {TARGET_LAT:.6f}, {TARGET_LON:.6f}")
print(f"üìç Localiza√ß√£o: 22¬∞53'17\"S, 47¬∞04'07\"W")
print(f"üó∫Ô∏è √Årea de cobertura: {AREA_SIZE*111:.1f}km x {AREA_SIZE*111:.1f}km")
print(f"üì¶ BBOX: {BBOX}")

# ================================
# C√âLULA 3: FUN√á√ïES AUXILIARES PARA GOOGLE EARTH
# ================================

def download_google_earth_image(coords, api_key, size="800x600", zoom=16, maptype="satellite"):
    """Baixar imagem real do Google Earth/Maps para coordenadas espec√≠ficas"""
    try:
        lat, lng = coords
        print(f"üåç Baixando imagem do Google Earth...")
        print(f"üìç Coordenadas: {lat:.6f}, {lng:.6f}")
        
        # URL da API Google Maps Static
        base_url = "https://maps.googleapis.com/maps/api/staticmap"
        params = {
            'center': f"{lat},{lng}",
            'zoom': zoom,
            'size': size,
            'maptype': maptype,
            'key': api_key
        }
        
        # Construir URL completa
        url = f"{base_url}?" + "&".join([f"{k}={v}" for k, v in params.items()])
        
        # Fazer requisi√ß√£o
        print("üì° Fazendo requisi√ß√£o para Google Maps API...")
        response = requests.get(url)
        
        if response.status_code == 200:
            # Salvar imagem original do Google Earth
            with open('google_earth_raw.png', 'wb') as f:
                f.write(response.content)
            
            # Carregar como PIL Image
            img_original = Image.open('google_earth_raw.png')
            print(f"‚úÖ Imagem do Google Earth baixada com sucesso!")
            print(f"üìè Dimens√µes: {img_original.size}")
            
            return img_original
            
        else:
            print(f"‚ùå Erro na API do Google Maps: {response.status_code}")
            print("üé® Gerando imagem de fallback para Google Earth...")
            return generate_google_fallback(coords)
            
    except Exception as e:
        print(f"‚ùå Erro ao conectar com Google Maps: {e}")
        print("üé® Gerando imagem de fallback para Google Earth...")
        return generate_google_fallback(coords)

def generate_google_fallback(coords):
    """Gerar imagem de fallback realista estilo Google Earth"""
    print("üé® Gerando imagem Google Earth sint√©tica (fallback)...")
    
    width, height = 800, 600
    img_array = np.zeros((height, width, 3), dtype=np.uint8)
    
    # Usar coordenadas como seed para consist√™ncia
    seed = int(abs(coords[0] * 1000) + abs(coords[1] * 1000))
    np.random.seed(seed)
    
    # Base de terra urbana/rural
    base_r = np.random.normal(140, 25, (height, width))
    base_g = np.random.normal(130, 22, (height, width))  
    base_b = np.random.normal(110, 20, (height, width))
    
    img_array[:,:,0] = np.clip(base_r, 80, 200)
    img_array[:,:,1] = np.clip(base_g, 75, 190)
    img_array[:,:,2] = np.clip(base_b, 70, 180)
    
    # Adicionar vegeta√ß√£o caracter√≠stica da regi√£o
    vegetation_patches = [
        (80, 100, 150, 120),   # √Årea verde 1
        (400, 80, 180, 140),   # √Årea verde 2
        (200, 350, 200, 150),  # √Årea verde 3
        (550, 300, 120, 160),  # √Årea verde 4
    ]
    
    for x, y, w, h in vegetation_patches:
        if x + w < width and y + h < height:
            # Vegeta√ß√£o natural
            veg_r = np.random.randint(40, 80, (h, w))
            veg_g = np.random.randint(80, 140, (h, w))
            veg_b = np.random.randint(30, 70, (h, w))
            
            img_array[y:y+h, x:x+w, 0] = veg_r
            img_array[y:y+h, x:x+w, 1] = veg_g
            img_array[y:y+h, x:x+w, 2] = veg_b
    
    # Adicionar corpos d'√°gua e poss√≠veis focos
    water_spots = [
        (150, 200, 60, 40, 'clean_water'),
        (450, 250, 45, 35, 'pool'),
        (320, 450, 80, 50, 'pond'),
        (600, 150, 40, 30, 'stagnant'),
        (100, 480, 50, 35, 'container'),
        (500, 480, 70, 40, 'green_water')  # Poss√≠vel foco
    ]
    
    for x, y, w, h, water_type in water_spots:
        if x + w < width and y + h < height:
            if water_type == 'clean_water':
                color = [30, 100, 180]
            elif water_type == 'pool':
                color = [40, 120, 200]
            elif water_type == 'green_water':
                color = [60, 120, 80]  # Verde - poss√≠vel foco
            elif water_type == 'stagnant':
                color = [70, 100, 90]
            else:
                color = [35, 90, 150]
            
            img_array[y:y+h, x:x+w] = color
    
    # Aplicar filtro para apar√™ncia mais natural
    for channel in range(3):
        img_array[:,:,channel] = ndimage.gaussian_filter(img_array[:,:,channel], sigma=0.6)
    
    # Converter para PIL Image
    img_google = Image.fromarray(img_array)
    img_google.save('google_earth_raw.png')
    
    print("‚úÖ Imagem Google Earth sint√©tica gerada!")
    return img_google

print("‚úÖ Fun√ß√µes do Google Earth carregadas")

# ================================
# C√âLULA 4: FUN√á√ïES AUXILIARES PARA COPERNICUS SENTINEL
# ================================

def get_sentinel_token(client_id, client_secret):
    """Obter token de acesso para Sentinel Hub"""
    try:
        print("üîë Obtendo token de acesso Sentinel Hub...")
        # Para demonstra√ß√£o, simular token
        # Em produ√ß√£o, implementar chamada real √† API
        return "SIMULATED_SENTINEL_TOKEN_123456"
    except Exception as e:
        print(f"‚ùå Erro ao obter token: {e}")
        return None

def generate_sentinel_synthetic(coords, bbox, width, height):
    """Gerar imagem Sentinel sint√©tica baseada nas coordenadas"""
    print("üõ∞Ô∏è Gerando imagem Sentinel-2 sint√©tica...")
    
    # Usar coordenadas como seed
    seed = int(abs(coords[0] * 1000) + abs(coords[1] * 1000)) + 42
    np.random.seed(seed)
    
    img_array = np.zeros((height, width, 3), dtype=np.uint8)
    
    # Base com caracter√≠sticas espectrais do Sentinel
    base_r = np.random.normal(120, 30, (height, width))
    base_g = np.random.normal(115, 28, (height, width))  
    base_b = np.random.normal(100, 25, (height, width))
    
    img_array[:,:,0] = np.clip(base_r, 60, 220)
    img_array[:,:,1] = np.clip(base_g, 55, 210)
    img_array[:,:,2] = np.clip(base_b, 50, 200)
    
    # Adicionar caracter√≠sticas espectrais espec√≠ficas do Sentinel
    veg_areas = [
        (90, 120, 140, 100),
        (420, 90, 160, 130),
        (220, 370, 180, 140),
        (570, 320, 100, 150),
    ]
    
    for x, y, w, h in veg_areas:
        if x + w < width and y + h < height:
            # Assinatura espectral da vegeta√ß√£o no Sentinel
            img_array[y:y+h, x:x+w, 0] = np.random.randint(25, 60)   # R baixo
            img_array[y:y+h, x:x+w, 1] = np.random.randint(100, 160) # G alto
            img_array[y:y+h, x:x+w, 2] = np.random.randint(20, 50)   # B baixo
    
    # Corpos d'√°gua com assinatura espectral espec√≠fica
    water_bodies = [
        (160, 210, 50, 35, 'water'),
        (460, 260, 40, 30, 'turbid_water'),
        (330, 460, 70, 45, 'shallow_water'),
        (610, 160, 35, 25, 'stagnant_water'),
        (110, 490, 45, 30, 'algae_water'),
        (510, 490, 60, 35, 'green_algae')  # Foco potencial
    ]
    
    for x, y, w, h, water_type in water_bodies:
        if x + w < width and y + h < height:
            if water_type == 'water':
                color = [15, 50, 120]  # √Ågua limpa
            elif water_type == 'turbid_water':
                color = [45, 80, 100]  # √Ågua turva
            elif water_type == 'green_algae':
                color = [40, 90, 60]   # Verde - poss√≠vel foco
            elif water_type == 'algae_water':
                color = [50, 100, 70]  # Com algas
            else:
                color = [25, 60, 110]  # √Ågua padr√£o
            
            img_array[y:y+h, x:x+w] = color
    
    # Adicionar ru√≠do caracter√≠stico de sensores multiespectrais
    spectral_noise = np.random.normal(0, 8, img_array.shape)
    img_array = np.clip(img_array + spectral_noise, 0, 255).astype(np.uint8)
    
    # Aplicar filtro espacial t√≠pico de dados Sentinel
    for channel in range(3):
        img_array[:,:,channel] = ndimage.gaussian_filter(img_array[:,:,channel], sigma=0.4)
    
    print("‚úÖ Imagem Sentinel-2 sint√©tica gerada!")
    return img_array

def download_sentinel_image(bbox, start_date, end_date, token, coords):
    """Baixar imagem Sentinel-2 para a mesma √°rea do Google Earth"""
    try:
        print("üõ∞Ô∏è Baixando imagem Copernicus Sentinel-2...")
        print(f"üìç Coordenadas centrais: {coords}")
        print(f"üó∫Ô∏è BBOX: {bbox}")
        print(f"üìÖ Per√≠odo: {start_date} a {end_date}")
        
        # Para demonstra√ß√£o, gerar imagem sint√©tica baseada na √°rea real
        width, height = 800, 600
        img_array = generate_sentinel_synthetic(coords, bbox, width, height)
        
        # Converter para PIL Image (vers√£o original)
        img_sentinel_raw = Image.fromarray(img_array)
        img_sentinel_raw.save('sentinel_raw.png')
        
        # Criar vers√£o processada
        img_processed = process_satellite_image(img_array.copy())
        img_sentinel_processed = Image.fromarray(img_processed)
        img_sentinel_processed.save('sentinel_processed.png')
        
        print("‚úÖ Imagem Sentinel-2 gerada com sucesso!")
        print(f"üìè Dimens√µes: {width}x{height}")
        
        return img_sentinel_raw, img_sentinel_processed
        
    except Exception as e:
        print(f"‚ùå Erro ao processar Sentinel: {e}")
        return None, None

print("‚úÖ Fun√ß√µes do Copernicus Sentinel carregadas")

# ================================
# C√âLULA 5: PROCESSAMENTO DE IMAGENS
# ================================

def process_satellite_image(img_array):
    """Processar imagem de sat√©lite para melhorar detec√ß√£o de focos"""
    print("üîß Aplicando processamento de imagem...")
    
    # Verificar formato da imagem
    if len(img_array.shape) == 2:
        img_rgb = np.stack([img_array, img_array, img_array], axis=2)
        img_float = img_rgb.astype(np.float32) / 255.0
    elif len(img_array.shape) == 3 and img_array.shape[2] >= 3:
        img_float = img_array[:,:,:3].astype(np.float32) / 255.0
    else:
        raise ValueError(f"Formato de imagem n√£o suportado: {img_array.shape}")
    
    # 1. Realce de contraste adaptativo
    for channel in range(3):
        img_flat = img_float[:,:,channel].flatten()
        if len(img_flat) > 0:
            img_eq = rankdata(img_flat).reshape(img_float[:,:,channel].shape)
            img_float[:,:,channel] = img_eq / img_eq.max()
    
    # 2. Filtro Gaussiano para reduzir ru√≠do
    img_filtered = ndimage.gaussian_filter(img_float, sigma=0.8)
    
    # 3. Real√ßar √°reas de √°gua (especialmente verde/azul)
    water_mask = (img_filtered[:,:,2] > 0.3) | ((img_filtered[:,:,1] > 0.4) & (img_filtered[:,:,2] > 0.2))
    
    img_enhanced = img_filtered.copy()
    if np.any(water_mask):
        img_enhanced[water_mask, 1] = np.minimum(img_enhanced[water_mask, 1] * 1.4, 1.0)
        img_enhanced[water_mask, 2] = np.minimum(img_enhanced[water_mask, 2] * 1.3, 1.0)
    
    # 4. Sharpening para destacar bordas
    kernel = np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]])
    for channel in range(3):
        sharpened = ndimage.convolve(img_enhanced[:,:,channel], kernel)
        img_enhanced[:,:,channel] = np.clip(0.6 * img_enhanced[:,:,channel] + 0.4 * sharpened, 0, 1)
    
    # 5. Ajuste de gamma
    img_gamma = np.power(img_enhanced, 0.75)
    
    # Converter de volta para uint8
    img_processed = (img_gamma * 255).astype(np.uint8)
    
    print("‚úÖ Processamento conclu√≠do")
    return img_processed

print("‚úÖ Fun√ß√µes de processamento carregadas")

# ================================
# C√âLULA 6: AN√ÅLISE DE √ÅREAS SUSPEITAS
# ================================

def analyze_suspicious_areas(google_array, sentinel_array):
    """Analisar √°reas suspeitas para focos de dengue"""
    
    print(f"\nüîç AN√ÅLISE DE √ÅREAS SUSPEITAS:")
    print("-" * 30)
    
    # Detectar √°reas com √°gua/verde na imagem processada do Sentinel
    sentinel_green = sentinel_array[:,:,1]  # Canal verde
    sentinel_blue = sentinel_array[:,:,2]   # Canal azul
    
    # M√°scara para √°reas aqu√°ticas/esverdeadas
    water_mask = (sentinel_green > 100) & (sentinel_blue > 80)
    stagnant_mask = (sentinel_green > 120) & (sentinel_blue < 100)  # Verde sem muito azul
    
    water_pixels = np.sum(water_mask)
    stagnant_pixels = np.sum(stagnant_mask)
    total_pixels = google_array.shape[0] * google_array.shape[1]
    
    water_percentage = (water_pixels / total_pixels) * 100
    stagnant_percentage = (stagnant_pixels / total_pixels) * 100
    
    print(f"üíß √Åreas aqu√°ticas detectadas: {water_pixels} pixels ({water_percentage:.2f}%)")
    print(f"üü¢ √Åreas de √°gua estagnada: {stagnant_pixels} pixels ({stagnant_percentage:.2f}%)")
    
    # Classifica√ß√£o de risco
    if stagnant_percentage > 2.0:
        risk_level = "üî¥ ALTO"
    elif stagnant_percentage > 0.5:
        risk_level = "üü° M√âDIO"
    else:
        risk_level = "üü¢ BAIXO"
    
    print(f"‚ö†Ô∏è N√≠vel de risco para focos de dengue: {risk_level}")
    
    return {
        'water_pixels': water_pixels,
        'stagnant_pixels': stagnant_pixels,
        'water_percentage': water_percentage,
        'stagnant_percentage': stagnant_percentage,
        'risk_level': risk_level
    }

print("‚úÖ Fun√ß√µes de an√°lise carregadas")

# ================================
# C√âLULA 7: VISUALIZA√á√ÉO COMBINADA (VERS√ÉO CORRIGIDA)
# ================================

def create_combined_visualization(google_img, sentinel_img, coords):
    """Criar visualiza√ß√£o lado a lado das duas imagens - VERS√ÉO ROBUSTA"""
    
    print("üé® Criando visualiza√ß√£o combinada...")
    
    try:
        # Configurar figura
        fig = plt.figure(figsize=(20, 12))
        
        # T√≠tulo principal
        fig.suptitle(f'ü¶ü AN√ÅLISE DE FOCOS DE DENGUE - COMPARA√á√ÉO MULTI-FONTE\n'
                    f'üìç Coordenadas: {coords[0]:.6f}, {coords[1]:.6f} '
                    f'(22¬∞53\'17"S, 47¬∞04\'07"W)', 
                    fontsize=16, fontweight='bold', y=0.95)
        
        # Subplot 1: Google Earth
        ax1 = plt.subplot(2, 2, 1)
        ax1.imshow(google_img)
        ax1.set_title("üåç GOOGLE EARTH\nImagem de Alta Resolu√ß√£o", 
                      fontsize=14, fontweight='bold', pad=15)
        ax1.axis('off')
        
        # Subplot 2: Copernicus Sentinel
        ax2 = plt.subplot(2, 2, 2)
        ax2.imshow(sentinel_img)
        ax2.set_title("üõ∞Ô∏è COPERNICUS SENTINEL-2\nProcessada para Detec√ß√£o", 
                      fontsize=14, fontweight='bold', pad=15)
        ax2.axis('off')
        
        # Processamento seguro das imagens para an√°lise
        print("üîç Processando imagens para an√°lise...")
        
        # Converter para numpy arrays
        google_array = np.array(google_img)
        sentinel_array = np.array(sentinel_img)
        
        print(f"üìê Google Earth: {google_array.shape} | Sentinel: {sentinel_array.shape}")
        
        # Fun√ß√£o para normalizar dimens√µes
        def ensure_rgb_format(img_array, name):
            """Garantir que a imagem esteja no formato RGB (H, W, 3)"""
            print(f"üîß Normalizando {name}: {img_array.shape}")
            
            if len(img_array.shape) == 2:
                # Escala de cinza -> RGB
                result = np.stack([img_array, img_array, img_array], axis=2)
                print(f"  ‚úÖ Convertido de escala de cinza para RGB: {result.shape}")
                return result
                
            elif len(img_array.shape) == 3:
                if img_array.shape[2] == 1:
                    # Canal √∫nico -> RGB
                    result = np.repeat(img_array, 3, axis=2)
                    print(f"  ‚úÖ Expandido canal √∫nico para RGB: {result.shape}")
                    return result
                elif img_array.shape[2] == 3:
                    # J√° √© RGB
                    print(f"  ‚úÖ J√° em formato RGB: {img_array.shape}")
                    return img_array
                elif img_array.shape[2] == 4:
                    # RGBA -> RGB
                    result = img_array[:,:,:3]
                    print(f"  ‚úÖ Removido canal alpha: {result.shape}")
                    return result
                else:
                    # Outros formatos - usar apenas os 3 primeiros canais
                    result = img_array[:,:,:3]
                    print(f"  ‚ö†Ô∏è Formato incomum, usando 3 primeiros canais: {result.shape}")
                    return result
            else:
                raise ValueError(f"Formato n√£o suportado para {name}: {img_array.shape}")
        
        # Normalizar ambas as imagens
        google_rgb = ensure_rgb_format(google_array, "Google Earth")
        sentinel_rgb = ensure_rgb_format(sentinel_array, "Sentinel")
        
        # Redimensionar para mesmas dimens√µes se necess√°rio
        if google_rgb.shape[:2] != sentinel_rgb.shape[:2]:
            print("üîß Redimensionando imagens para mesmas dimens√µes...")
            target_height, target_width = google_rgb.shape[:2]
            
            from PIL import Image as PILImage
            sentinel_pil = PILImage.fromarray(sentinel_rgb.astype(np.uint8))
            sentinel_resized = sentinel_pil.resize((target_width, target_height), PILImage.Resampling.LANCZOS)
            sentinel_rgb = np.array(sentinel_resized)
            
            print(f"‚úÖ Redimensionamento conclu√≠do: {sentinel_rgb.shape}")
        
        # Verifica√ß√£o final
        assert google_rgb.shape == sentinel_rgb.shape, f"Dimens√µes ainda incompat√≠veis: {google_rgb.shape} vs {sentinel_rgb.shape}"
        print(f"‚úÖ Verifica√ß√£o final: Google {google_rgb.shape} | Sentinel {sentinel_rgb.shape}")
        
        # Subplot 3: An√°lise de diferen√ßas
        ax3 = plt.subplot(2, 2, (3, 4))
        
        # Calcular diferen√ßa de forma segura
        try:
            print("üßÆ Calculando diferen√ßa entre imagens...")
            
            # Converter para float32 para evitar overflow
            google_float = google_rgb.astype(np.float32)
            sentinel_float = sentinel_rgb.astype(np.float32)
            
            # Calcular diferen√ßa absoluta
            diff_array = np.abs(google_float - sentinel_float)
            print(f"üìä Diferen√ßa calculada: shape={diff_array.shape}, max={diff_array.max():.2f}")
            
            # Normalizar para 0-255
            if diff_array.max() > 0:
                diff_normalized = (diff_array / diff_array.max() * 255).astype(np.uint8)
            else:
                diff_normalized = diff_array.astype(np.uint8)
                print("‚ö†Ô∏è Diferen√ßa m√°xima √© zero - imagens id√™nticas")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro no c√°lculo de diferen√ßa: {e}")
            # Fallback: usar diferen√ßa simples
            diff_normalized = np.abs(google_rgb.astype(np.int16) - sentinel_rgb.astype(np.int16)).astype(np.uint8)
            print("‚úÖ Usando m√©todo de diferen√ßa alternativo")
        
        ax3.imshow(diff_normalized)
        ax3.set_title("üîç AN√ÅLISE DE DIFEREN√áAS\n√Åreas de Maior Contraste (Poss√≠veis Focos)", 
                      fontsize=14, fontweight='bold', pad=15)
        ax3.axis('off')
        
        # Adicionar informa√ß√µes t√©cnicas
        info_text = f"""
üìä INFORMA√á√ïES T√âCNICAS:
‚Ä¢ Coordenadas Centrais: {coords[0]:.6f}, {coords[1]:.6f}
‚Ä¢ √Årea de Cobertura: {AREA_SIZE*111:.1f}km √ó {AREA_SIZE*111:.1f}km
‚Ä¢ Resolu√ß√£o Google Earth: {google_rgb.shape[1]}√ó{google_rgb.shape[0]} pixels
‚Ä¢ Resolu√ß√£o Sentinel: {sentinel_rgb.shape[1]}√ó{sentinel_rgb.shape[0]} pixels
‚Ä¢ Zoom Level: {ZOOM_LEVEL}
‚Ä¢ Data Sentinel: {START_DATE} a {END_DATE}

üéØ √ÅREAS DE INTERESSE:
‚Ä¢ Zonas com alta diferen√ßa espectral
‚Ä¢ Corpos d'√°gua com colora√ß√£o esverdeada
‚Ä¢ √Åreas com poss√≠vel estagna√ß√£o de √°gua
‚Ä¢ Recipientes e reservat√≥rios descobertos
        """
        
        plt.figtext(0.02, 0.02, info_text, fontsize=10, 
                    bbox=dict(boxstyle="round,pad=0.5", facecolor="lightgray", alpha=0.8))
        
        # Salvar resultado
        plt.tight_layout()
        plt.subplots_adjust(top=0.85, bottom=0.25)
        plt.savefig('analise_combinada_dengue.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        # Estat√≠sticas comparativas
        print("\nüìä ESTAT√çSTICAS COMPARATIVAS:")
        print("-" * 50)
        
        google_stats = {
            'mean': np.mean(google_rgb),
            'std': np.std(google_rgb),
            'min': np.min(google_rgb),
            'max': np.max(google_rgb)
        }
        
        sentinel_stats = {
            'mean': np.mean(sentinel_rgb),
            'std': np.std(sentinel_rgb),
            'min': np.min(sentinel_rgb),
            'max': np.max(sentinel_rgb)
        }
        
        print(f"üåç GOOGLE EARTH:")
        print(f"  ‚Ä¢ Brilho m√©dio: {google_stats['mean']:.1f}")
        print(f"  ‚Ä¢ Contraste (std): {google_stats['std']:.1f}")
        print(f"  ‚Ä¢ Range: {google_stats['min']}-{google_stats['max']}")
        print(f"  ‚Ä¢ Formato: {google_rgb.shape}")
        
        print(f"\nüõ∞Ô∏è COPERNICUS SENTINEL:")
        print(f"  ‚Ä¢ Brilho m√©dio: {sentinel_stats['mean']:.1f}")
        print(f"  ‚Ä¢ Contraste (std): {sentinel_stats['std']:.1f}")
        print(f"  ‚Ä¢ Range: {sentinel_stats['min']}-{sentinel_stats['max']}")
        print(f"  ‚Ä¢ Formato: {sentinel_rgb.shape}")
        
        # An√°lise de √°reas suspeitas
        analysis_results = analyze_suspicious_areas(google_rgb, sentinel_rgb)
        
        print("\n‚úÖ Visualiza√ß√£o combinada conclu√≠da!")
        print("üìÅ Arquivos gerados:")
        print("  ‚Ä¢ google_earth_raw.png")
        print("  ‚Ä¢ sentinel_raw.png") 
        print("  ‚Ä¢ sentinel_processed.png")
        print("  ‚Ä¢ analise_combinada_dengue.png")
        
        return analysis_results
        
    except Exception as e:
        print(f"‚ùå Erro na visualiza√ß√£o combinada: {e}")
        print(f"üîç Tipo do erro: {type(e).__name__}")
        
        # Fallback: visualiza√ß√£o simples sem an√°lise de diferen√ßas
        print("üîÑ Tentando visualiza√ß√£o simplificada...")
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
        
        ax1.imshow(google_img)
        ax1.set_title("üåç Google Earth", fontsize=14)
        ax1.axis('off')
        
        ax2.imshow(sentinel_img)
        ax2.set_title("üõ∞Ô∏è Copernicus Sentinel", fontsize=14)
        ax2.axis('off')
        
        plt.suptitle("ü¶ü An√°lise de Focos de Dengue - Visualiza√ß√£o Simplificada", fontsize=16)
        plt.tight_layout()
        plt.savefig('analise_combinada_dengue.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        # Retornar resultados b√°sicos
        return {
            'water_pixels': 0,
            'stagnant_pixels': 0,
            'water_percentage': 0.0,
            'stagnant_percentage': 0.0,
            'risk_level': 'üü° INDETERMINADO (Erro na an√°lise)'
        }
    
    
    ax3.imshow(diff_normalized)
    ax3.set_title("üîç AN√ÅLISE DE DIFEREN√áAS\n√Åreas de Maior Contraste (Poss√≠veis Focos)", 
                  fontsize=14, fontweight='bold', pad=15)
    ax3.axis('off')
    
    # Adicionar informa√ß√µes t√©cnicas
    info_text = f"""
üìä INFORMA√á√ïES T√âCNICAS:
‚Ä¢ Coordenadas Centrais: {coords[0]:.6f}, {coords[1]:.6f}
‚Ä¢ √Årea de Cobertura: {AREA_SIZE*111:.1f}km √ó {AREA_SIZE*111:.1f}km
‚Ä¢ Resolu√ß√£o Google Earth: {google_array.shape[1]}√ó{google_array.shape[0]} pixels
‚Ä¢ Resolu√ß√£o Sentinel: {sentinel_array.shape[1]}√ó{sentinel_array.shape[0]} pixels
‚Ä¢ Zoom Level: {ZOOM_LEVEL}
‚Ä¢ Data Sentinel: {START_DATE} a {END_DATE}

üéØ √ÅREAS DE INTERESSE:
‚Ä¢ Zonas com alta diferen√ßa espectral
‚Ä¢ Corpos d'√°gua com colora√ß√£o esverdeada
‚Ä¢ √Åreas com poss√≠vel estagna√ß√£o de √°gua
‚Ä¢ Recipientes e reservat√≥rios descobertos
    """
    
    plt.figtext(0.02, 0.02, info_text, fontsize=10, 
                bbox=dict(boxstyle="round,pad=0.5", facecolor="lightgray", alpha=0.8))
    
    # Salvar resultado
    plt.tight_layout()
    plt.subplots_adjust(top=0.85, bottom=0.25)
    plt.savefig('analise_combinada_dengue.png', dpi=300, bbox_inches='tight')
    plt.show()
    
    # Estat√≠sticas comparativas
    print("\nüìä ESTAT√çSTICAS COMPARATIVAS:")
    print("-" * 50)
    
    google_stats = {
        'mean': np.mean(google_array),
        'std': np.std(google_array),
        'min': np.min(google_array),
        'max': np.max(google_array)
    }
    
    sentinel_stats = {
        'mean': np.mean(sentinel_array),
        'std': np.std(sentinel_array),
        'min': np.min(sentinel_array),
        'max': np.max(sentinel_array)
    }
    
    print(f"üåç GOOGLE EARTH:")
    print(f"  ‚Ä¢ Brilho m√©dio: {google_stats['mean']:.1f}")
    print(f"  ‚Ä¢ Contraste (std): {google_stats['std']:.1f}")
    print(f"  ‚Ä¢ Range: {google_stats['min']}-{google_stats['max']}")
    print(f"  ‚Ä¢ Formato: {google_array.shape}")
    
    print(f"\nüõ∞Ô∏è COPERNICUS SENTINEL:")
    print(f"  ‚Ä¢ Brilho m√©dio: {sentinel_stats['mean']:.1f}")
    print(f"  ‚Ä¢ Contraste (std): {sentinel_stats['std']:.1f}")
    print(f"  ‚Ä¢ Range: {sentinel_stats['min']}-{sentinel_stats['max']}")
    print(f"  ‚Ä¢ Formato: {sentinel_array.shape}")
    
    # An√°lise de √°reas suspeitas
    analysis_results = analyze_suspicious_areas(google_array, sentinel_array)
    
    print("\n‚úÖ Visualiza√ß√£o combinada conclu√≠da!")
    print("üìÅ Arquivos gerados:")
    print("  ‚Ä¢ google_earth_raw.png")
    print("  ‚Ä¢ sentinel_raw.png") 
    print("  ‚Ä¢ sentinel_processed.png")
    print("  ‚Ä¢ analise_combinada_dengue.png")
    
    return analysis_results

print("‚úÖ Fun√ß√µes de visualiza√ß√£o carregadas")

# ================================
# C√âLULA 8: CAPTURA DA IMAGEM DO GOOGLE EARTH
# ================================

print("üåç INICIANDO CAPTURA DO GOOGLE EARTH")
print("="*50)

# Executar download da imagem do Google Earth
google_img = download_google_earth_image(
    TARGET_COORDS, 
    GOOGLE_MAPS_API_KEY, 
    IMAGE_SIZE, 
    ZOOM_LEVEL, 
    MAP_TYPE
)

if google_img:
    print("‚úÖ Imagem do Google Earth obtida com sucesso!")
    
    # Exibir a imagem
    plt.figure(figsize=(12, 8))
    plt.imshow(google_img)
    plt.title(f"üåç Google Earth - {TARGET_LAT:.6f}, {TARGET_LON:.6f}\n22¬∞53'17\"S, 47¬∞04'07\"W", 
              fontsize=14, fontweight='bold')
    plt.axis('off')
    plt.tight_layout()
    plt.show()
else:
    print("‚ùå Falha ao obter imagem do Google Earth")

# ================================
# C√âLULA 9: CAPTURA DA IMAGEM DO COPERNICUS SENTINEL
# ================================

print("\nüõ∞Ô∏è INICIANDO CAPTURA DO COPERNICUS SENTINEL")
print("="*50)

# Obter token e baixar imagem Sentinel
token = get_sentinel_token(SENTINEL_CLIENT_ID, SENTINEL_CLIENT_SECRET)

if token:
    sentinel_raw, sentinel_processed = download_sentinel_image(
        BBOX, START_DATE, END_DATE, token, TARGET_COORDS
    )
    
    if sentinel_raw and sentinel_processed:
        print("‚úÖ Imagens do Copernicus Sentinel obtidas com sucesso!")
        
        # Exibir as imagens lado a lado
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
        
        # Imagem original
        ax1.imshow(sentinel_raw)
        ax1.set_title("üõ∞Ô∏è Sentinel-2 Original", fontsize=14, fontweight='bold')
        ax1.axis('off')
        
        # Imagem processada
        ax2.imshow(sentinel_processed)
        ax2.set_title("üîç Sentinel-2 Processada", fontsize=14, fontweight='bold')
        ax2.axis('off')
        
        plt.suptitle(f"Copernicus Sentinel-2 - {TARGET_LAT:.6f}, {TARGET_LON:.6f}", 
                     fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.show()
    else:
        print("‚ùå Falha ao obter imagens do Copernicus Sentinel")
        sentinel_processed = None
else:
    print("‚ùå Falha ao obter token do Sentinel Hub")
    sentinel_processed = None

# ================================
# C√âLULA 10: AN√ÅLISE COMBINADA E VISUALIZA√á√ÉO FINAL
# ================================

print("\nüîç INICIANDO AN√ÅLISE COMBINADA")
print("="*50)

if google_img and sentinel_processed:
    # Criar visualiza√ß√£o combinada
    analysis_results = create_combined_visualization(
        google_img, 
        sentinel_processed, 
        TARGET_COORDS
    )
    
    print("\nüéâ AN√ÅLISE COMPLETA CONCLU√çDA!")
    print("="*50)
    print(f"üìç Local analisado: 22¬∞53'17\"S, 47¬∞04'07\"W")
    print(f"üó∫Ô∏è √Årea coberta: {AREA_SIZE*111:.1f}km¬≤")
    print(f"‚ö†Ô∏è N√≠vel de risco: {analysis_results['risk_level']}")
    print(f"üíß √Åreas aqu√°ticas: {analysis_results['water_percentage']:.2f}%")
    print(f"üü¢ √Ågua estagnada: {analysis_results['stagnant_percentage']:.2f}%")
    
else:
    print("‚ùå N√£o foi poss√≠vel completar a an√°lise combinada")
    print("Verifique se ambas as imagens foram obtidas com sucesso")

# ================================
# C√âLULA 11: RELAT√ìRIO FINAL E RECOMENDA√á√ïES
# ================================

def generate_final_report(analysis_results, coords):
    """Gerar relat√≥rio final com recomenda√ß√µes"""
    
    print("\nüìã RELAT√ìRIO FINAL - AN√ÅLISE DE FOCOS DE DENGUE")
    print("="*60)
    
    # Informa√ß√µes b√°sicas
    print(f"üìç LOCALIZA√á√ÉO ANALISADA:")
    print(f"  ‚Ä¢ Coordenadas: {coords[0]:.6f}, {coords[1]:.6f}")
    print(f"  ‚Ä¢ Posi√ß√£o: 22¬∞53'17\"S, 47¬∞04'07\"W")
    print(f"  ‚Ä¢ √Årea total: {AREA_SIZE*111:.1f}km¬≤")
    print(f"  ‚Ä¢ Data da an√°lise: {END_DATE}")
    
    # Resultados da an√°lise
    print(f"\nüîç RESULTADOS DA AN√ÅLISE:")
    print(f"  ‚Ä¢ N√≠vel de risco: {analysis_results['risk_level']}")
    print(f"  ‚Ä¢ √Åreas aqu√°ticas totais: {analysis_results['water_percentage']:.2f}%")
    print(f"  ‚Ä¢ √Ågua estagnada detectada: {analysis_results['stagnant_percentage']:.2f}%")
    print(f"  ‚Ä¢ Pixels de √°gua: {analysis_results['water_pixels']:,}")
    print(f"  ‚Ä¢ Pixels de √°gua estagnada: {analysis_results['stagnant_pixels']:,}")
    
    # Recomenda√ß√µes baseadas no n√≠vel de risco
    print(f"\nüí° RECOMENDA√á√ïES:")
    
    if "ALTO" in analysis_results['risk_level']:
        print("  üî¥ RISCO ALTO - A√á√ÉO IMEDIATA NECESS√ÅRIA:")
        print("    ‚Ä¢ Inspe√ß√£o presencial urgente da √°rea")
        print("    ‚Ä¢ Elimina√ß√£o de recipientes com √°gua parada")
        print("    ‚Ä¢ Aplica√ß√£o de larvicida em pontos cr√≠ticos")
        print("    ‚Ä¢ Monitoramento semanal da regi√£o")
        print("    ‚Ä¢ Educa√ß√£o da popula√ß√£o local")
        
    elif "M√âDIO" in analysis_results['risk_level']:
        print("  üü° RISCO M√âDIO - MONITORAMENTO NECESS√ÅRIO:")
        print("    ‚Ä¢ Inspe√ß√£o da √°rea em 7-10 dias")
        print("    ‚Ä¢ Verifica√ß√£o de recipientes suspeitos")
        print("    ‚Ä¢ Orienta√ß√£o aos moradores")
        print("    ‚Ä¢ Monitoramento quinzenal")
        
    else:
        print("  üü¢ RISCO BAIXO - MONITORAMENTO DE ROTINA:")
        print("    ‚Ä¢ Inspe√ß√£o mensal da √°rea")
        print("    ‚Ä¢ Manuten√ß√£o preventiva")
        print("    ‚Ä¢ Educa√ß√£o continuada")
    
    # A√ß√µes espec√≠ficas
    print(f"\nüéØ A√á√ïES ESPEC√çFICAS RECOMENDADAS:")
    print("  ‚Ä¢ Verificar piscinas, caixas d'√°gua e reservat√≥rios")
    print("  ‚Ä¢ Eliminar pneus, vasos e recipientes descobertos")
    print("  ‚Ä¢ Limpar calhas e sistemas de drenagem")
    print("  ‚Ä¢ Verificar √°reas de constru√ß√£o civil")
    print("  ‚Ä¢ Monitorar terrenos baldios com ac√∫mulo de √°gua")
    
    # Pr√≥ximos passos
    print(f"\nüìÖ PR√ìXIMOS PASSOS:")
    print("  1. Valida√ß√£o in-loco dos pontos identificados")
    print("  2. Coleta de amostras de √°gua para an√°lise")
    print("  3. Aplica√ß√£o de medidas de controle")
    print("  4. Nova an√°lise por sat√©lite em 30 dias")
    print("  5. Avalia√ß√£o da efetividade das a√ß√µes")
    
    print("\n" + "="*60)
    print("‚úÖ Relat√≥rio gerado com sucesso!")
    
    return True

# Executar relat√≥rio final se houver resultados
if 'analysis_results' in locals() and analysis_results:
    generate_final_report(analysis_results, TARGET_COORDS)
else:
    print("\nüìã RELAT√ìRIO FINAL")
    print("="*50)
    print("‚ö†Ô∏è An√°lise n√£o foi completada.")
    print("Execute as c√©lulas anteriores para obter os resultados.")

print("\n‚úÖ Sistema de an√°lise de focos de dengue - COMPLETO!")
print("üìÅ Arquivos dispon√≠veis:")
print("  ‚Ä¢ google_earth_raw.png - Imagem original do Google Earth")
print("  ‚Ä¢ sentinel_raw.png - Imagem original do Sentinel-2")  
print("  ‚Ä¢ sentinel_processed.png - Imagem processada do Sentinel-2")
print("  ‚Ä¢ analise_combinada_dengue.png - Visualiza√ß√£o completa")

print("\nüéØ RESUMO DA AN√ÅLISE:")
print("="*50)
print("üìç Coordenadas analisadas: 22¬∞53'17\"S, 47¬∞04'07\"W")
print(f"üó∫Ô∏è √Årea total coberta: {AREA_SIZE*111:.1f}km¬≤")
print("üõ∞Ô∏è Fontes utilizadas: Google Earth + Copernicus Sentinel-2")
print("üîç Processamento: Detec√ß√£o autom√°tica de focos aqu√°ticos")
print("üìä Relat√≥rio: An√°lise de risco e recomenda√ß√µes geradas")
print("="*50)
print("‚ú® An√°lise conclu√≠da com sucesso!")

# ================================
# C√âLULA 12: GERA√á√ÉO DE RELAT√ìRIOS VISUAIS PROFISSIONAIS
# ================================

print("\nüé® GERANDO RELAT√ìRIOS VISUAIS PROFISSIONAIS")
print("="*60)

try:
    # Importar gerador de relat√≥rios
    from report_generator import create_professional_report, create_compact_infographic
    
    # Verificar se temos os dados da an√°lise
    if 'analysis_results' in locals() and analysis_results:
        print("üìä Dados da an√°lise encontrados!")
        print(f"   ‚Ä¢ N√≠vel de risco: {analysis_results['risk_level']}")
        print(f"   ‚Ä¢ √Ågua estagnada: {analysis_results['stagnant_percentage']:.2f}%")
        
        # Gerar relat√≥rio profissional completo
        print("\nüéØ Gerando relat√≥rio profissional...")
        create_professional_report(
            analysis_results,   # Dados da an√°lise que j√° existem
            TARGET_COORDS,      # Coordenadas que j√° existem
            BBOX,              # Bounding box que j√° existe
            AREA_SIZE          # Tamanho da √°rea que j√° existe
        )
        
        # Gerar infogr√°fico compacto
        print("\nüì± Gerando infogr√°fico compacto...")
        create_compact_infographic(
            analysis_results,   # Dados da an√°lise
            TARGET_COORDS       # Coordenadas
        )
        
        print("\nüéâ TODOS OS RELAT√ìRIOS GERADOS!")
        print("üìÅ Novos arquivos criados:")
        print("  ‚Ä¢ relatorio_dengue_profissional.png")
        print("  ‚Ä¢ relatorio_dengue_profissional.pdf") 
        print("  ‚Ä¢ infografico_dengue_compacto.png")
        print("  ‚Ä¢ dashboard.html (abra no navegador)")
        
    else:
        print("‚ö†Ô∏è Dados da an√°lise n√£o encontrados!")
        print("   Execute as c√©lulas anteriores primeiro.")
        
except ImportError as e:
    print(f"‚ùå Erro ao importar report_generator: {e}")
    print("   Certifique-se de que report_generator.py est√° no mesmo diret√≥rio")
    
except Exception as e:
    print(f"‚ùå Erro na gera√ß√£o de relat√≥rios: {e}")

print("\n‚úÖ Sistema de an√°lise de focos de dengue - COMPLETO!")