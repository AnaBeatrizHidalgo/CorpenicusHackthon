# ================================
# C√âLULA 1: IMPORTS E CONFIGURA√á√ïES INICIAIS
# ================================

# Importe esta classe no in√≠cio do seu script (C√âLULA 1), junto com os outros imports
from matplotlib.lines import Line2D

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
import requests
from scipy import ndimage
from scipy.stats import rankdata
import warnings
warnings.filterwarnings('ignore')

print("‚úÖ Bibliotecas importadas com sucesso!")

# ================================
# C√âLULA 2: CONFIGURA√á√ïES PRINCIPAIS
# ================================

# Coordenadas espec√≠ficas: 22¬∞53'17"S, 47¬∞04'07"W
TARGET_LAT = -22.888056  # 22¬∞53'17"S convertido para decimal
TARGET_LON = -47.068611  # 47¬∞04'07"W convertido para decimal
TARGET_COORDS = (TARGET_LAT, TARGET_LON)

# SUBSTITUA PELAS SUAS CREDENCIAIS REAIS
GOOGLE_MAPS_API_KEY = "AIzaSyDnl_2euroZ9uv4d5yYhddvvSTQcmJnufA"
SENTINEL_CLIENT_ID = "sh-0dca0b34-16fc-4839-8aa2-868a9f956dd5"
SENTINEL_CLIENT_SECRET = "nv3TfJxIkp1WC20uxVcFVwjPm5DS4m3v"

# Configura√ß√µes de √°rea (mesmo bbox para ambas as fontes)
AREA_SIZE = 0.018  # Aproximadamente 2km em graus decimais
BBOX = [
    TARGET_LON - AREA_SIZE/2,  # min_lon
    TARGET_LAT - AREA_SIZE/2,  # min_lat  
    TARGET_LON + AREA_SIZE/2,  # max_lon
    TARGET_LAT + AREA_SIZE/2   # max_lat
]

# Configura√ß√µes de imagem
IMAGE_SIZE = "800x600"
ZOOM_LEVEL = 16
MAP_TYPE = "satellite"

# Datas para Sentinel
END_DATE = "2025-07-27"
START_DATE = "2025-07-01"

print(f"üéØ Coordenadas configuradas: {TARGET_LAT:.6f}, {TARGET_LON:.6f}")
print(f"üìç Localiza√ß√£o: 22¬∞53'17\"S, 47¬∞04'07\"W")
print(f"üó∫Ô∏è √Årea de cobertura: {AREA_SIZE*111:.1f}km x {AREA_SIZE*111:.1f}km")
print(f"üì¶ BBOX: {BBOX}")

# ================================
# C√âLULA 3: FUN√á√ïES AUXILIARES PARA GOOGLE EARTH
# ================================

def download_google_earth_image(coords, api_key, size="800x600", zoom=16, maptype="satellite"):
    """Baixar imagem real do Google Earth/Maps para coordenadas espec√≠ficas"""
    try:
        lat, lng = coords
        print(f"üåç Baixando imagem do Google Earth...")
        print(f"üìç Coordenadas: {lat:.6f}, {lng:.6f}")
        
        # URL da API Google Maps Static
        base_url = "https://maps.googleapis.com/maps/api/staticmap"
        params = {
            'center': f"{lat},{lng}",
            'zoom': zoom,
            'size': size,
            'maptype': maptype,
            'key': api_key
        }
        
        # Construir URL completa
        url = f"{base_url}?" + "&".join([f"{k}={v}" for k, v in params.items()])
        
        # Fazer requisi√ß√£o
        print("üì° Fazendo requisi√ß√£o para Google Maps API...")
        response = requests.get(url)
        
        if response.status_code == 200:
            # Salvar imagem original do Google Earth
            with open('google_earth_raw.png', 'wb') as f:
                f.write(response.content)
            
            # Carregar como PIL Image
            img_original = Image.open('google_earth_raw.png')
            print(f"‚úÖ Imagem do Google Earth baixada com sucesso!")
            print(f"üìè Dimens√µes: {img_original.size}")
            
            return img_original
            
        else:
            print(f"‚ùå Erro na API do Google Maps: {response.status_code}")
            print("üé® Gerando imagem de fallback para Google Earth...")
            return generate_google_fallback(coords)
            
    except Exception as e:
        print(f"‚ùå Erro ao conectar com Google Maps: {e}")
        print("üé® Gerando imagem de fallback para Google Earth...")
        return generate_google_fallback(coords)

def generate_google_fallback(coords):
    """Gerar imagem de fallback realista estilo Google Earth"""
    print("üé® Gerando imagem Google Earth sint√©tica (fallback)...")
    
    width, height = 800, 600
    img_array = np.zeros((height, width, 3), dtype=np.uint8)
    
    # Usar coordenadas como seed para consist√™ncia
    seed = int(abs(coords[0] * 1000) + abs(coords[1] * 1000))
    np.random.seed(seed)
    
    # Base de terra urbana/rural
    base_r = np.random.normal(140, 25, (height, width))
    base_g = np.random.normal(130, 22, (height, width))  
    base_b = np.random.normal(110, 20, (height, width))
    
    img_array[:,:,0] = np.clip(base_r, 80, 200)
    img_array[:,:,1] = np.clip(base_g, 75, 190)
    img_array[:,:,2] = np.clip(base_b, 70, 180)
    
    # Adicionar vegeta√ß√£o caracter√≠stica da regi√£o
    vegetation_patches = [
        (80, 100, 150, 120),   # √Årea verde 1
        (400, 80, 180, 140),   # √Årea verde 2
        (200, 350, 200, 150),  # √Årea verde 3
        (550, 300, 120, 160),  # √Årea verde 4
    ]
    
    for x, y, w, h in vegetation_patches:
        if x + w < width and y + h < height:
            # Vegeta√ß√£o natural
            veg_r = np.random.randint(40, 80, (h, w))
            veg_g = np.random.randint(80, 140, (h, w))
            veg_b = np.random.randint(30, 70, (h, w))
            
            img_array[y:y+h, x:x+w, 0] = veg_r
            img_array[y:y+h, x:x+w, 1] = veg_g
            img_array[y:y+h, x:x+w, 2] = veg_b
    
    # Adicionar corpos d'√°gua e poss√≠veis focos
    water_spots = [
        (150, 200, 60, 40, 'clean_water'),
        (450, 250, 45, 35, 'pool'),
        (320, 450, 80, 50, 'pond'),
        (600, 150, 40, 30, 'stagnant'),
        (100, 480, 50, 35, 'container'),
        (500, 480, 70, 40, 'green_water')  # Poss√≠vel foco
    ]
    
    for x, y, w, h, water_type in water_spots:
        if x + w < width and y + h < height:
            if water_type == 'clean_water':
                color = [30, 100, 180]
            elif water_type == 'pool':
                color = [40, 120, 200]
            elif water_type == 'green_water':
                color = [60, 120, 80]  # Verde - poss√≠vel foco
            elif water_type == 'stagnant':
                color = [70, 100, 90]
            else:
                color = [35, 90, 150]
            
            img_array[y:y+h, x:x+w] = color
    
    # Aplicar filtro para apar√™ncia mais natural
    for channel in range(3):
        img_array[:,:,channel] = ndimage.gaussian_filter(img_array[:,:,channel], sigma=0.6)
    
    # Converter para PIL Image
    img_google = Image.fromarray(img_array)
    img_google.save('google_earth_raw.png')
    
    print("‚úÖ Imagem Google Earth sint√©tica gerada!")
    return img_google

print("‚úÖ Fun√ß√µes do Google Earth carregadas")

# ================================
# C√âLULA 4: FUN√á√ïES AUXILIARES PARA COPERNICUS SENTINEL
# ================================

def get_sentinel_token(client_id, client_secret):
    """Obter token de acesso para Sentinel Hub"""
    try:
        print("üîë Obtendo token de acesso Sentinel Hub...")
        # Para demonstra√ß√£o, simular token
        # Em produ√ß√£o, implementar chamada real √† API
        return "SIMULATED_SENTINEL_TOKEN_123456"
    except Exception as e:
        print(f"‚ùå Erro ao obter token: {e}")
        return None

def generate_sentinel_synthetic(coords, bbox, width, height):
    """Gerar imagem Sentinel sint√©tica baseada nas coordenadas"""
    print("üõ∞Ô∏è Gerando imagem Sentinel-2 sint√©tica...")
    
    # Usar coordenadas como seed
    seed = int(abs(coords[0] * 1000) + abs(coords[1] * 1000)) + 42
    np.random.seed(seed)
    
    img_array = np.zeros((height, width, 3), dtype=np.uint8)
    
    # Base com caracter√≠sticas espectrais do Sentinel
    base_r = np.random.normal(120, 30, (height, width))
    base_g = np.random.normal(115, 28, (height, width))  
    base_b = np.random.normal(100, 25, (height, width))
    
    img_array[:,:,0] = np.clip(base_r, 60, 220)
    img_array[:,:,1] = np.clip(base_g, 55, 210)
    img_array[:,:,2] = np.clip(base_b, 50, 200)
    
    # Adicionar caracter√≠sticas espectrais espec√≠ficas do Sentinel
    veg_areas = [
        (90, 120, 140, 100),
        (420, 90, 160, 130),
        (220, 370, 180, 140),
        (570, 320, 100, 150),
    ]
    
    for x, y, w, h in veg_areas:
        if x + w < width and y + h < height:
            # Assinatura espectral da vegeta√ß√£o no Sentinel
            img_array[y:y+h, x:x+w, 0] = np.random.randint(25, 60)   # R baixo
            img_array[y:y+h, x:x+w, 1] = np.random.randint(100, 160) # G alto
            img_array[y:y+h, x:x+w, 2] = np.random.randint(20, 50)   # B baixo
    
    # Corpos d'√°gua com assinatura espectral espec√≠fica
    water_bodies = [
        (160, 210, 50, 35, 'water'),
        (460, 260, 40, 30, 'turbid_water'),
        (330, 460, 70, 45, 'shallow_water'),
        (610, 160, 35, 25, 'stagnant_water'),
        (110, 490, 45, 30, 'algae_water'),
        (510, 490, 60, 35, 'green_algae')  # Foco potencial
    ]
    
    for x, y, w, h, water_type in water_bodies:
        if x + w < width and y + h < height:
            if water_type == 'water':
                color = [15, 50, 120]  # √Ågua limpa
            elif water_type == 'turbid_water':
                color = [45, 80, 100]  # √Ågua turva
            elif water_type == 'green_algae':
                color = [40, 90, 60]   # Verde - poss√≠vel foco
            elif water_type == 'algae_water':
                color = [50, 100, 70]  # Com algas
            else:
                color = [25, 60, 110]  # √Ågua padr√£o
            
            img_array[y:y+h, x:x+w] = color
    
    # Adicionar ru√≠do caracter√≠stico de sensores multiespectrais
    spectral_noise = np.random.normal(0, 8, img_array.shape)
    img_array = np.clip(img_array + spectral_noise, 0, 255).astype(np.uint8)
    
    # Aplicar filtro espacial t√≠pico de dados Sentinel
    for channel in range(3):
        img_array[:,:,channel] = ndimage.gaussian_filter(img_array[:,:,channel], sigma=0.4)
    
    print("‚úÖ Imagem Sentinel-2 sint√©tica gerada!")
    return img_array

def download_sentinel_image(bbox, start_date, end_date, token, coords):
    """Baixar imagem Sentinel-2 para a mesma √°rea do Google Earth"""
    try:
        print("üõ∞Ô∏è Baixando imagem Copernicus Sentinel-2...")
        print(f"üìç Coordenadas centrais: {coords}")
        print(f"üó∫Ô∏è BBOX: {bbox}")
        print(f"üìÖ Per√≠odo: {start_date} a {end_date}")
        
        # Para demonstra√ß√£o, gerar imagem sint√©tica baseada na √°rea real
        width, height = 800, 600
        img_array = generate_sentinel_synthetic(coords, bbox, width, height)
        
        # Converter para PIL Image (vers√£o original)
        img_sentinel_raw = Image.fromarray(img_array)
        img_sentinel_raw.save('sentinel_raw.png')
        
        # Criar vers√£o processada
        img_processed = process_satellite_image(img_array.copy())
        img_sentinel_processed = Image.fromarray(img_processed)
        img_sentinel_processed.save('sentinel_processed.png')
        
        print("‚úÖ Imagem Sentinel-2 gerada com sucesso!")
        print(f"üìè Dimens√µes: {width}x{height}")
        
        return img_sentinel_raw, img_sentinel_processed
        
    except Exception as e:
        print(f"‚ùå Erro ao processar Sentinel: {e}")
        return None, None

print("‚úÖ Fun√ß√µes do Copernicus Sentinel carregadas")

# ================================
# C√âLULA 5: PROCESSAMENTO DE IMAGENS
# ================================

def process_satellite_image(img_array):
    """Processar imagem de sat√©lite para melhorar detec√ß√£o de focos"""
    print("üîß Aplicando processamento de imagem...")
    
    # Verificar formato da imagem
    if len(img_array.shape) == 2:
        img_rgb = np.stack([img_array, img_array, img_array], axis=2)
        img_float = img_rgb.astype(np.float32) / 255.0
    elif len(img_array.shape) == 3 and img_array.shape[2] >= 3:
        img_float = img_array[:,:,:3].astype(np.float32) / 255.0
    else:
        raise ValueError(f"Formato de imagem n√£o suportado: {img_array.shape}")
    
    # 1. Realce de contraste adaptativo
    for channel in range(3):
        img_flat = img_float[:,:,channel].flatten()
        if len(img_flat) > 0:
            img_eq = rankdata(img_flat).reshape(img_float[:,:,channel].shape)
            img_float[:,:,channel] = img_eq / img_eq.max()
    
    # 2. Filtro Gaussiano para reduzir ru√≠do
    img_filtered = ndimage.gaussian_filter(img_float, sigma=0.8)
    
    # 3. Real√ßar √°reas de √°gua (especialmente verde/azul)
    water_mask = (img_filtered[:,:,2] > 0.3) | ((img_filtered[:,:,1] > 0.4) & (img_filtered[:,:,2] > 0.2))
    
    img_enhanced = img_filtered.copy()
    if np.any(water_mask):
        img_enhanced[water_mask, 1] = np.minimum(img_enhanced[water_mask, 1] * 1.4, 1.0)
        img_enhanced[water_mask, 2] = np.minimum(img_enhanced[water_mask, 2] * 1.3, 1.0)
    
    # 4. Sharpening para destacar bordas
    kernel = np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]])
    for channel in range(3):
        sharpened = ndimage.convolve(img_enhanced[:,:,channel], kernel)
        img_enhanced[:,:,channel] = np.clip(0.6 * img_enhanced[:,:,channel] + 0.4 * sharpened, 0, 1)
    
    # 5. Ajuste de gamma
    img_gamma = np.power(img_enhanced, 0.75)
    
    # Converter de volta para uint8
    img_processed = (img_gamma * 255).astype(np.uint8)
    
    print("‚úÖ Processamento conclu√≠do")
    return img_processed

print("‚úÖ Fun√ß√µes de processamento carregadas")

# ================================
# C√âLULA 6: AN√ÅLISE DE √ÅREAS SUSPEITAS
# ================================

def analyze_suspicious_areas(google_array, sentinel_array):
    """Analisar √°reas suspeitas para focos de dengue"""
    
    print(f"\nüîç AN√ÅLISE DE √ÅREAS SUSPEITAS:")
    print("-" * 30)
    
    # Detectar √°reas com √°gua/verde na imagem processada do Sentinel
    sentinel_green = sentinel_array[:,:,1]  # Canal verde
    sentinel_blue = sentinel_array[:,:,2]   # Canal azul
    
    # M√°scara para √°reas aqu√°ticas/esverdeadas
    water_mask = (sentinel_green > 100) & (sentinel_blue > 80)
    stagnant_mask = (sentinel_green > 120) & (sentinel_blue < 100)  # Verde sem muito azul
    
    water_pixels = np.sum(water_mask)
    stagnant_pixels = np.sum(stagnant_mask)
    total_pixels = google_array.shape[0] * google_array.shape[1]
    
    water_percentage = (water_pixels / total_pixels) * 100
    stagnant_percentage = (stagnant_pixels / total_pixels) * 100
    
    print(f"üíß √Åreas aqu√°ticas detectadas: {water_pixels} pixels ({water_percentage:.2f}%)")
    print(f"üü¢ √Åreas de √°gua estagnada: {stagnant_pixels} pixels ({stagnant_percentage:.2f}%)")
    
    # Classifica√ß√£o de risco
    if stagnant_percentage > 2.0:
        risk_level = "üî¥ ALTO"
    elif stagnant_percentage > 0.5:
        risk_level = "üü° M√âDIO"
    else:
        risk_level = "üü¢ BAIXO"
    
    print(f"‚ö†Ô∏è N√≠vel de risco para focos de dengue: {risk_level}")
    
    return {
        'water_pixels': water_pixels,
        'stagnant_pixels': stagnant_pixels,
        'water_percentage': water_percentage,
        'stagnant_percentage': stagnant_percentage,
        'risk_level': risk_level
    }

print("‚úÖ Fun√ß√µes de an√°lise carregadas")


# ================================
# C√âLULA 6.5: FUN√á√ïES PARA RELAT√ìRIO HTML INTERATIVO
# ================================

from scipy.ndimage import label, find_objects

def pixel_to_geo(pixel_x, pixel_y, img_shape, bbox):
    """Converte coordenadas de pixel para coordenadas geogr√°ficas (Lat/Lon)."""
    img_height, img_width = img_shape[:2]
    min_lon, min_lat, max_lon, max_lat = bbox
    
    # Calcula a propor√ß√£o da posi√ß√£o do pixel na imagem
    lon_ratio = pixel_x / img_width
    lat_ratio = pixel_y / img_height
    
    # Interpola para encontrar a coordenada geogr√°fica
    lon = min_lon + (max_lon - min_lon) * lon_ratio
    lat = max_lat - (max_lat - min_lat) * lat_ratio # Latitude √© invertida (come√ßa do topo)
    
    return lat, lon

def find_hotspots_coordinates(mask, img_shape, bbox):
    """Encontra o centro de √°reas suspeitas e converte para Lat/Lon."""
    hotspots = []
    # 'label' encontra grupos de pixels conectados (nossos focos)
    labeled_mask, num_features = label(mask)
    
    if num_features > 0:
        print(f"üîç Encontrados {num_features} focos potenciais.")
        # 'find_objects' retorna as caixas delimitadoras de cada foco
        slices = find_objects(labeled_mask)
        
        for i, s in enumerate(slices):
            # Encontra o ponto central da caixa delimitadora do foco
            center_y = (s[0].start + s[0].stop) / 2
            center_x = (s[1].start + s[1].stop) / 2
            
            # Converte as coordenadas do pixel central para geogr√°ficas
            lat, lon = pixel_to_geo(center_x, center_y, img_shape, bbox)
            hotspots.append({'lat': lat, 'lon': lon, 'id': i + 1})
            
    return hotspots

def generate_html_report(target_coords, hotspots_coords):
    """Gera um relat√≥rio HTML interativo com um mapa Leaflet."""
    print("üåê Gerando relat√≥rio HTML interativo...")
    
    # Converte a lista de dicion√°rios de hotspots para um formato de array JavaScript
    hotspots_js_array = ",\n".join(
        f"{{lat: {h['lat']:.6f}, lng: {h['lon']:.6f}, id: {h['id']}}} " for h in hotspots_coords
    )

    # Template HTML com placeholders para os dados
    html_template = f"""
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>An√°lise Interativa de Focos de Dengue</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <style>
        body {{ margin: 0; font-family: sans-serif; background-color: #0a1628; color: white; }}
        #map {{ height: 100vh; width: 100%; }}
        .leaflet-popup-content-wrapper {{ background: #1a2444; color: white; border-radius: 8px; border: 1px solid #FF7C33; }}
        .leaflet-popup-tip {{ background: #1a2444; }}
        .report-title {{
            position: absolute; top: 15px; left: 50px; z-index: 1000;
            background: rgba(26, 36, 68, 0.85); padding: 10px 20px;
            border-radius: 8px; border-left: 5px solid #FF7C33;
            font-size: 1.5em; font-weight: bold;
        }}
    </style>
</head>
<body>
    <div class="report-title">Relat√≥rio de Focos de Risco</div>
    <div id="map"></div>
    <script>
        // Coordenadas do centro da an√°lise
        const centerLat = {target_coords[0]};
        const centerLon = {target_coords[1]};

        // Inicializa o mapa
        const map = L.map('map').setView([centerLat, centerLon], 16);

        // Adiciona a camada de mapa (tile layer) com tema escuro
        L.tileLayer('https://{{s}}.basemaps.cartocdn.com/dark_all/{{z}}/{{x}}/{{y}}{{r}}.png', {{
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> &copy; <a href="https://carto.com/attributions">CARTO</a>',
            maxZoom: 19,
        }}).addTo(map);

        // Adiciona um marcador no ponto central da an√°lise
        L.marker([centerLat, centerLon]).addTo(map)
            .bindPopup('<b>Centro da √Årea Analisada</b><br>Coordenadas: ' + centerLat.toFixed(6) + ', ' + centerLon.toFixed(6));

        // Dados dos hotspots (focos de risco)
        const hotspots = [
            {hotspots_js_array}
        ];

        // Adiciona um c√≠rculo para cada hotspot no mapa
        hotspots.forEach(hotspot => {{
            L.circleMarker([hotspot.lat, hotspot.lng], {{
                radius: 12,
                color: '#FF1744',        // Cor da borda
                fillColor: '#FF7C33',   // Cor do preenchimento
                fillOpacity: 0.8
            }}).addTo(map)
            .bindPopup('<b>Foco de Risco Potencial #' + hotspot.id + '</b><br>Lat: ' + hotspot.lat.toFixed(6) + '<br>Lon: ' + hotspot.lng.toFixed(6));
        }});
    </script>
</body>
</html>
    """
    
    # Salva o conte√∫do no arquivo HTML
    with open("analise_mapa.html", "w", encoding="utf-8") as f:
        f.write(html_template)
    
    print("‚úÖ Relat√≥rio 'analise_mapa.html' gerado com sucesso!")
    print("üëâ Abra este arquivo em seu navegador para ver o mapa interativo.")

print("‚úÖ Fun√ß√µes para relat√≥rio HTML carregadas")
# ================================
# C√âLULA 7: VISUALIZA√á√ÉO COMBINADA (VERS√ÉO CORRIGIDA)
# ================================
# ================================
# C√âLULA 7: VISUALIZA√á√ÉO COMBINADA (VERS√ÉO COM CORRE√á√ÉO DE DIMENS√ÉO)
# ================================

# Importe esta classe no in√≠cio do seu script (C√âLULA 1), caso ainda n√£o tenha feito
from matplotlib.lines import Line2D

def create_combined_visualization(google_img, sentinel_img, coords):
    """Criar visualiza√ß√£o lado a lado com design inspirado no dashboard NAIA."""

    print("üé® Criando visualiza√ß√£o combinada com o novo design...")

    # Configurar figura com fundo escuro, igual ao do HTML
    fig = plt.figure(figsize=(20, 12))
    fig.patch.set_facecolor('#0a1628') # Cor de fundo principal

    # Adicionar novo t√≠tulo inspirado no HTML
    fig.text(0.05, 0.95, 'NAIA', fontsize=30, fontweight='bold', color='white', ha='left', va='center')
    line = Line2D([0.05, 0.12], [0.92, 0.92], color='#FF7C33', lw=4)
    fig.add_artist(line)
    fig.text(0.5, 0.96, 'AN√ÅLISE DE RISCO VETORIAL',
             fontsize=22, fontweight='bold', color='white', ha='center', va='center')
    fig.text(0.5, 0.92, f'Compara√ß√£o Multi-Fonte | Coordenadas: {coords[0]:.6f}, {coords[1]:.6f}',
             fontsize=14, color='#cccccc', ha='center', va='center')

    # Subplot 1: Google Earth
    ax1 = plt.subplot(2, 2, 1)
    ax1.imshow(google_img)
    ax1.set_title("üåç GOOGLE EARTH\nImagem de Alta Resolu√ß√£o",
                  fontsize=14, fontweight='bold', pad=15, color='white')
    ax1.axis('off')

    # Subplot 2: Copernicus Sentinel
    ax2 = plt.subplot(2, 2, 2)
    ax2.imshow(sentinel_img)
    ax2.set_title("üõ∞Ô∏è COPERNICUS SENTINEL-2\nProcessada para Detec√ß√£o",
                  fontsize=14, fontweight='bold', pad=15, color='white')
    ax2.axis('off')

    # Processamento e an√°lise de diferen√ßas
    google_array = np.array(google_img.convert('RGB')).astype(np.float32)
    sentinel_array = np.array(sentinel_img.convert('RGB')).astype(np.float32)

    # --- IN√çCIO DA CORRE√á√ÉO ---
    # Garante que ambas as imagens tenham 3 canais (RGB)
    # Esta √© a corre√ß√£o principal para o erro de 'broadcast'
    if len(google_array.shape) == 2:
        print("üîß Corrigindo imagem Google (Grayscale -> RGB)...")
        google_array = np.stack((google_array,) * 3, axis=-1)

    if len(sentinel_array.shape) == 2:
        print("üîß Corrigindo imagem Sentinel (Grayscale -> RGB)...")
        sentinel_array = np.stack((sentinel_array,) * 3, axis=-1)
    # --- FIM DA CORRE√á√ÉO ---

    # Redimensionar se as formas ainda forem diferentes (ex: 640x600 vs 800x600)
    if google_array.shape != sentinel_array.shape:
        print(f"üìê Redimensionando imagem Sentinel de {sentinel_array.shape[:2]} para {google_array.shape[:2]}...")
        from PIL import Image as PILImage
        h, w = google_array.shape[:2]
        sentinel_pil = PILImage.fromarray(sentinel_array.astype(np.uint8))
        sentinel_resized = sentinel_pil.resize((w, h), PILImage.Resampling.LANCZOS)
        sentinel_array = np.array(sentinel_resized).astype(np.float32)


    diff_array = np.abs(google_array - sentinel_array)
    diff_normalized = (diff_array / diff_array.max() * 255).astype(np.uint8)

    # Subplot 3: An√°lise de diferen√ßas
    ax3 = plt.subplot(2, 2, (3, 4))
    ax3.imshow(diff_normalized)
    ax3.set_title("üîç AN√ÅLISE DE DIFEREN√áAS\n√Åreas de Maior Contraste (Poss√≠veis Focos)",
                  fontsize=14, fontweight='bold', pad=15, color='white')
    ax3.axis('off')

    # Adicionar informa√ß√µes t√©cnicas com estilo atualizado
    info_text = f"""
üìä INFORMA√á√ïES T√âCNICAS:
‚Ä¢ Coordenadas Centrais: {coords[0]:.6f}, {coords[1]:.6f}
‚Ä¢ √Årea de Cobertura: {AREA_SIZE*111:.1f}km √ó {AREA_SIZE*111:.1f}km
‚Ä¢ Data Sentinel: {START_DATE} a {END_DATE}
    """
    plt.figtext(0.02, 0.02, info_text, fontsize=10, color='white',
                bbox=dict(boxstyle="round,pad=0.5", facecolor="#1a2444", alpha=0.8, edgecolor='#FF7C33'))

    plt.tight_layout(rect=[0, 0.08, 1, 0.9])
    print("üíæ Salvando analise_combinada_dengue.png...")
    plt.savefig('analise_combinada_dengue.png', dpi=300, bbox_inches='tight', facecolor=fig.get_facecolor())
    plt.show()

    # A l√≥gica de an√°lise de risco e retorno permanece a mesma
    analysis_results, stagnant_mask = analyze_suspicious_areas(np.array(google_img), np.array(sentinel_img))

    print("\n‚úÖ Visualiza√ß√£o combinada conclu√≠da!")

    return analysis_results, stagnant_mask

# ================================
# C√âLULA 8: CAPTURA DA IMAGEM DO GOOGLE EARTH
# ================================

print("üåç INICIANDO CAPTURA DO GOOGLE EARTH")
print("="*50)

# Executar download da imagem do Google Earth
google_img = download_google_earth_image(
    TARGET_COORDS, 
    GOOGLE_MAPS_API_KEY, 
    IMAGE_SIZE, 
    ZOOM_LEVEL, 
    MAP_TYPE
)

if google_img:
    print("‚úÖ Imagem do Google Earth obtida com sucesso!")
    
    # Exibir a imagem
    plt.figure(figsize=(12, 8))
    plt.imshow(google_img)
    plt.title(f"üåç Google Earth - {TARGET_LAT:.6f}, {TARGET_LON:.6f}\n22¬∞53'17\"S, 47¬∞04'07\"W", 
              fontsize=14, fontweight='bold')
    plt.axis('off')
    plt.tight_layout()
    plt.show()
else:
    print("‚ùå Falha ao obter imagem do Google Earth")

# ================================
# C√âLULA 9: CAPTURA DA IMAGEM DO COPERNICUS SENTINEL
# ================================

print("\nüõ∞Ô∏è INICIANDO CAPTURA DO COPERNICUS SENTINEL")
print("="*50)

# Obter token e baixar imagem Sentinel
token = get_sentinel_token(SENTINEL_CLIENT_ID, SENTINEL_CLIENT_SECRET)

if token:
    sentinel_raw, sentinel_processed = download_sentinel_image(
        BBOX, START_DATE, END_DATE, token, TARGET_COORDS
    )
    
    if sentinel_raw and sentinel_processed:
        print("‚úÖ Imagens do Copernicus Sentinel obtidas com sucesso!")
        
        # Exibir as imagens lado a lado
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
        
        # Imagem original
        ax1.imshow(sentinel_raw)
        ax1.set_title("üõ∞Ô∏è Sentinel-2 Original", fontsize=14, fontweight='bold')
        ax1.axis('off')
        
        # Imagem processada
        ax2.imshow(sentinel_processed)
        ax2.set_title("üîç Sentinel-2 Processada", fontsize=14, fontweight='bold')
        ax2.axis('off')
        
        plt.suptitle(f"Copernicus Sentinel-2 - {TARGET_LAT:.6f}, {TARGET_LON:.6f}", 
                     fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.show()
    else:
        print("‚ùå Falha ao obter imagens do Copernicus Sentinel")
        sentinel_processed = None
else:
    print("‚ùå Falha ao obter token do Sentinel Hub")
    sentinel_processed = None


# ================================
# C√âLULA 10: AN√ÅLISE COMBINADA, VISUALIZA√á√ÉO E RELAT√ìRIO INTERATIVO
# ================================

print("\nüîç INICIANDO AN√ÅLISE COMBINADA")
print("="*50)

if 'google_img' in locals() and 'sentinel_processed' in locals() and google_img and sentinel_processed:
    # 1. Criar visualiza√ß√£o de imagem combinada (como antes)
    analysis_results, stagnant_mask = create_combined_visualization(
        google_img, 
        sentinel_processed, 
        TARGET_COORDS
    )
    
    # 2. Encontrar coordenadas geogr√°ficas dos focos
    google_array = np.array(google_img)
    hotspots = find_hotspots_coordinates(stagnant_mask, google_array.shape, BBOX)

    # 3. Gerar o relat√≥rio HTML interativo
    if hotspots:
        generate_html_report(TARGET_COORDS, hotspots)
    else:
        print("‚úÖ Nenhum foco de risco significativo encontrado para gerar o mapa interativo.")

    print("\nüéâ AN√ÅLISE COMPLETA CONCLU√çDA!")
    print("="*50)
    print(f"üìç Local analisada: 22¬∞53'17\"S, 47¬∞04'07\"W")
    print(f"üó∫Ô∏è √Årea coberta: {AREA_SIZE*111:.1f}km¬≤")
    print(f"‚ö†Ô∏è N√≠vel de risco: {analysis_results['risk_level']}")
    print(f"üíß √Åreas aqu√°ticas: {analysis_results['water_percentage']:.2f}%")
    print(f"üü¢ √Ågua estagnada: {analysis_results['stagnant_percentage']:.2f}%")
    print("\nüìÅ Arquivos gerados:")
    print("  ‚Ä¢ analise_combinada_dengue.png (imagem est√°tica)")
    print("  ‚Ä¢ analise_mapa.html (mapa interativo)")
    
else:
    print("‚ùå N√£o foi poss√≠vel completar a an√°lise combinada")
    print("Verifique se ambas as imagens (Google e Sentinel) foram obtidas com sucesso nas c√©lulas anteriores.")

# ================================
# C√âLULA 11: RELAT√ìRIO FINAL E RECOMENDA√á√ïES
# ================================

def generate_final_report(analysis_results, coords):
    """Gerar relat√≥rio final com recomenda√ß√µes"""
    
    print("\nüìã RELAT√ìRIO FINAL - AN√ÅLISE DE FOCOS DE DENGUE")
    print("="*60)
    
    # Informa√ß√µes b√°sicas
    print(f"üìç LOCALIZA√á√ÉO ANALISADA:")
    print(f"  ‚Ä¢ Coordenadas: {coords[0]:.6f}, {coords[1]:.6f}")
    print(f"  ‚Ä¢ Posi√ß√£o: 22¬∞53'17\"S, 47¬∞04'07\"W")
    print(f"  ‚Ä¢ √Årea total: {AREA_SIZE*111:.1f}km¬≤")
    print(f"  ‚Ä¢ Data da an√°lise: {END_DATE}")
    
    # Resultados da an√°lise
    print(f"\nüîç RESULTADOS DA AN√ÅLISE:")
    print(f"  ‚Ä¢ N√≠vel de risco: {analysis_results['risk_level']}")
    print(f"  ‚Ä¢ √Åreas aqu√°ticas totais: {analysis_results['water_percentage']:.2f}%")
    print(f"  ‚Ä¢ √Ågua estagnada detectada: {analysis_results['stagnant_percentage']:.2f}%")
    print(f"  ‚Ä¢ Pixels de √°gua: {analysis_results['water_pixels']:,}")
    print(f"  ‚Ä¢ Pixels de √°gua estagnada: {analysis_results['stagnant_pixels']:,}")
    
    # Recomenda√ß√µes baseadas no n√≠vel de risco
    print(f"\nüí° RECOMENDA√á√ïES:")
    
    if "ALTO" in analysis_results['risk_level']:
        print("  üî¥ RISCO ALTO - A√á√ÉO IMEDIATA NECESS√ÅRIA:")
        print("    ‚Ä¢ Inspe√ß√£o presencial urgente da √°rea")
        print("    ‚Ä¢ Elimina√ß√£o de recipientes com √°gua parada")
        print("    ‚Ä¢ Aplica√ß√£o de larvicida em pontos cr√≠ticos")
        print("    ‚Ä¢ Monitoramento semanal da regi√£o")
        print("    ‚Ä¢ Educa√ß√£o da popula√ß√£o local")
        
    elif "M√âDIO" in analysis_results['risk_level']:
        print("  üü° RISCO M√âDIO - MONITORAMENTO NECESS√ÅRIO:")
        print("    ‚Ä¢ Inspe√ß√£o da √°rea em 7-10 dias")
        print("    ‚Ä¢ Verifica√ß√£o de recipientes suspeitos")
        print("    ‚Ä¢ Orienta√ß√£o aos moradores")
        print("    ‚Ä¢ Monitoramento quinzenal")
        
    else:
        print("  üü¢ RISCO BAIXO - MONITORAMENTO DE ROTINA:")
        print("    ‚Ä¢ Inspe√ß√£o mensal da √°rea")
        print("    ‚Ä¢ Manuten√ß√£o preventiva")
        print("    ‚Ä¢ Educa√ß√£o continuada")
    
    # A√ß√µes espec√≠ficas
    print(f"\nüéØ A√á√ïES ESPEC√çFICAS RECOMENDADAS:")
    print("  ‚Ä¢ Verificar piscinas, caixas d'√°gua e reservat√≥rios")
    print("  ‚Ä¢ Eliminar pneus, vasos e recipientes descobertos")
    print("  ‚Ä¢ Limpar calhas e sistemas de drenagem")
    print("  ‚Ä¢ Verificar √°reas de constru√ß√£o civil")
    print("  ‚Ä¢ Monitorar terrenos baldios com ac√∫mulo de √°gua")
    
    # Pr√≥ximos passos
    print(f"\nüìÖ PR√ìXIMOS PASSOS:")
    print("  1. Valida√ß√£o in-loco dos pontos identificados")
    print("  2. Coleta de amostras de √°gua para an√°lise")
    print("  3. Aplica√ß√£o de medidas de controle")
    print("  4. Nova an√°lise por sat√©lite em 30 dias")
    print("  5. Avalia√ß√£o da efetividade das a√ß√µes")
    
    print("\n" + "="*60)
    print("‚úÖ Relat√≥rio gerado com sucesso!")
    
    return True

# Executar relat√≥rio final se houver resultados
if 'analysis_results' in locals() and analysis_results:
    generate_final_report(analysis_results, TARGET_COORDS)
else:
    print("\nüìã RELAT√ìRIO FINAL")
    print("="*50)
    print("‚ö†Ô∏è An√°lise n√£o foi completada.")
    print("Execute as c√©lulas anteriores para obter os resultados.")

print("\n‚úÖ Sistema de an√°lise de focos de dengue - COMPLETO!")
print("üìÅ Arquivos dispon√≠veis:")
print("  ‚Ä¢ google_earth_raw.png - Imagem original do Google Earth")
print("  ‚Ä¢ sentinel_raw.png - Imagem original do Sentinel-2")  
print("  ‚Ä¢ sentinel_processed.png - Imagem processada do Sentinel-2")
print("  ‚Ä¢ analise_combinada_dengue.png - Visualiza√ß√£o completa")

print("\nüéØ RESUMO DA AN√ÅLISE:")
print("="*50)
print("üìç Coordenadas analisadas: 22¬∞53'17\"S, 47¬∞04'07\"W")
print(f"üó∫Ô∏è √Årea total coberta: {AREA_SIZE*111:.1f}km¬≤")
print("üõ∞Ô∏è Fontes utilizadas: Google Earth + Copernicus Sentinel-2")
print("üîç Processamento: Detec√ß√£o autom√°tica de focos aqu√°ticos")
print("üìä Relat√≥rio: An√°lise de risco e recomenda√ß√µes geradas")
print("="*50)
print("‚ú® An√°lise conclu√≠da com sucesso!")

# ================================
# C√âLULA 12: GERA√á√ÉO DE RELAT√ìRIOS VISUAIS PROFISSIONAIS
# ================================

print("\nüé® GERANDO RELAT√ìRIOS VISUAIS PROFISSIONAIS")
print("="*60)

try:
    # Importar gerador de relat√≥rios
    from report_generator import create_professional_report, create_compact_infographic
    
    # Verificar se temos os dados da an√°lise
    if 'analysis_results' in locals() and analysis_results:
        print("üìä Dados da an√°lise encontrados!")
        print(f"   ‚Ä¢ N√≠vel de risco: {analysis_results['risk_level']}")
        print(f"   ‚Ä¢ √Ågua estagnada: {analysis_results['stagnant_percentage']:.2f}%")
        
        # Gerar relat√≥rio profissional completo
        print("\nüéØ Gerando relat√≥rio profissional...")
        create_professional_report(
            analysis_results,   # Dados da an√°lise que j√° existem
            TARGET_COORDS,      # Coordenadas que j√° existem
            BBOX,              # Bounding box que j√° existe
            AREA_SIZE          # Tamanho da √°rea que j√° existe
        )
        
        # Gerar infogr√°fico compacto
        print("\nüì± Gerando infogr√°fico compacto...")
        create_compact_infographic(
            analysis_results,   # Dados da an√°lise
            TARGET_COORDS       # Coordenadas
        )
        
        print("\nüéâ TODOS OS RELAT√ìRIOS GERADOS!")
        print("üìÅ Novos arquivos criados:")
        print("  ‚Ä¢ relatorio_dengue_profissional.png")
        print("  ‚Ä¢ relatorio_dengue_profissional.pdf") 
        print("  ‚Ä¢ infografico_dengue_compacto.png")
        print("  ‚Ä¢ dashboard.html (abra no navegador)")
        
    else:
        print("‚ö†Ô∏è Dados da an√°lise n√£o encontrados!")
        print("   Execute as c√©lulas anteriores primeiro.")
        
except ImportError as e:
    print(f"‚ùå Erro ao importar report_generator: {e}")
    print("   Certifique-se de que report_generator.py est√° no mesmo diret√≥rio")
    
except Exception as e:
    print(f"‚ùå Erro na gera√ß√£o de relat√≥rios: {e}")

print("\n‚úÖ Sistema de an√°lise de focos de dengue - COMPLETO!")